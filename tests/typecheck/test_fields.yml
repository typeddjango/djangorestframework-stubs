-   case: no_positional_args_fields
    main: |
        from rest_framework.fields import IntegerField, FloatField, UUIDField, CharField, DurationField
        CharField(True)  # E: Too many positional arguments for "CharField"
        IntegerField(1)  # E: Too many positional arguments for "IntegerField"
        FloatField(1)  # E: Too many positional arguments for "FloatField"
        UUIDField('hex_verbose')  # E: Too many positional arguments for "UUIDField"
        DurationField(1)  # E: Too many positional arguments for "DurationField"

-   case: some_positional_args_fields
    main: |
        from datetime import datetime, time
        from django.db import models
        from rest_framework.fields import DecimalField, IPAddressField, SlugField, RegexField, ModelField, SerializerMethodField, ChoiceField, DateTimeField, DateField, TimeField

        DecimalField(1, 1, False, 1, 1, False, None, False)
        DecimalField(1, 1, False, 1, 1, False, None, False, True)  # E: Too many positional arguments for "DecimalField"

        IPAddressField('both')
        IPAddressField('both', True)  # E: Too many positional arguments for "IPAddressField"

        SlugField(False)
        SlugField(False, True)  # E: Too many positional arguments for "SlugField"

        RegexField('^$')
        RegexField('^$', True)  # E: Too many positional arguments for "RegexField"

        SerializerMethodField('bla')
        SerializerMethodField('bla', True)  # E: Too many positional arguments for "SerializerMethodField"

        mf: models.CharField = models.CharField()
        ModelField(mf)
        ModelField(mf, True)  # E: Too many positional arguments for "ModelField"

        ChoiceField([])
        ChoiceField([], False)  # E: Too many positional arguments for "ChoiceField"

        d: datetime = datetime.now()
        DateTimeField('', [], None, read_only=True, write_only=True, allow_null=True)
        DateTimeField('', [], None, True)  # E: Too many positional arguments for "DateTimeField"

        DateField('', [], read_only=True, write_only=True, allow_null=True)
        DateField('', [], True)  # E: Too many positional arguments for "DateField"

        TimeField('', [], read_only=True, write_only=True, allow_null=True)
        TimeField('', [], True)  # E: Too many positional arguments for "TimeField"

-   case: default_and_inital_args_fields
    main: |
        from rest_framework.fields import DictField, CharField, empty
        from typing import Optional, Dict, Any

        CharField(initial='', default=lambda: '')
        CharField(initial=None, default=4)  # E: Argument "default" to "CharField" has incompatible type "int"; expected "Union[Union[str, _StrPromise], Callable[[], Union[str, _StrPromise]], None, _Empty]"
        CharField(initial={}, default=empty)  # E: Argument "initial" to "CharField" has incompatible type "Dict[Never, Never]"; expected "Union[str, Callable[[], str], None, _Empty]"

        x: Optional[str] = CharField().get_initial()
        y: Optional[int] = CharField().get_initial()  # E: Incompatible types in assignment (expression has type "Optional[str]", variable has type "Optional[int]")

-   case: float_field_args_fields
    main: |
      from rest_framework.fields import FloatField

      FloatField(min_value=1, max_value=1.0)
      FloatField(min_value=1.2, max_value=1)

-   case: ChoiceField_default
    main: |
        from typing import Union
        from rest_framework.fields import ChoiceField

        def int_callback() -> int: ...
        def mixed_callback() -> Union[int, str]: ...

        ChoiceField([1], default=1)
        ChoiceField(['test'], allow_null=True, default=None)
        ChoiceField([1], default=int_callback)
        ChoiceField([1, 'lulz'], default=mixed_callback)
        ChoiceField([1], default=lambda: None)   # E: Argument "default" to "ChoiceField" has incompatible type "Callable[[], None]"; expected "Union[Union[str, _StrPromise], int, Callable[[], Union[Union[str, _StrPromise], int]], None, _Empty]" # E: Incompatible return value type (got "None", expected "Union[Union[str, _StrPromise], int]")

-   case: MultipleChoiceField_default
    main: |
        from typing import Set, Union
        from rest_framework.fields import MultipleChoiceField

        def int_set_callback() -> Set[int]: ...
        def mixed_set_callback() -> Set[Union[int, str]]: ...

        MultipleChoiceField(choices=[1], default={1})
        MultipleChoiceField(choices=['test'], allow_null=True, default=None)
        MultipleChoiceField(choices=[1], default=int_set_callback)
        MultipleChoiceField(choices=[1, 'lulz'], default=mixed_set_callback)
        MultipleChoiceField(choices=[1], default=lambda: [1])   # E: Argument "default" to "MultipleChoiceField" has incompatible type "Callable[[], List[int]]"; expected "Union[Set[Union[str, int]], Set[str], Set[int], Callable[[], Union[Set[Union[str, int]], Set[str], Set[int]]], None, _Empty]" # E: Incompatible return value type (got "List[int]", expected "Union[Set[Union[str, int]], Set[str], Set[int]]")

        MultipleChoiceField(choices=[(1, "1"), (2, "2")], default={1})
        MultipleChoiceField(choices=[(1, "1"), (2, "2")], default=[1])  # E: Argument "default" to "MultipleChoiceField" has incompatible type "List[int]"; expected "Union[Set[Union[str, int]], Set[str], Set[int], Callable[[], Union[Set[Union[str, int]], Set[str], Set[int]]], None, _Empty]"

        MultipleChoiceField(choices=[(1, "1"), (2, "2")], initial={1})
        MultipleChoiceField(choices=[(1, "1"), (2, "2")], initial=[1])  # E: Argument "initial" to "MultipleChoiceField" has incompatible type "List[int]"; expected "Union[Set[Union[Union[str, _StrPromise], int]], Set[Union[str, _StrPromise]], Set[int], Callable[[], Union[Set[Union[Union[str, _StrPromise], int]], Set[Union[str, _StrPromise]], Set[int]]], None, _Empty]"

-   case: FileField_default
    main: |
        from rest_framework.fields import FileField, ImageField
        from django.core.files.base import File

        def file_callback() -> File: ...

        FileField(allow_null=True, default=None)
        FileField(allow_null=True, default=file_callback)
        FileField(allow_null=True, default=file_callback())
        FileField(allow_null=True, default=123) # E: Argument "default" to "FileField" has incompatible type "int"; expected "Union[File[Any], Callable[[], File[Any]], None, _Empty]"

        ImageField(allow_null=True, default=None)
        ImageField(default=file_callback)
        ImageField(default=file_callback())
        ImageField(default='a') # E: Argument "default" to "ImageField" has incompatible type "str"; expected "Union[File[Any], Callable[[], File[Any]], None, _Empty]"

-   case: DictField_default
    main: |
        from rest_framework.fields import DictField, JSONField

        DictField(allow_null=True, default=None)
        DictField(default={})
        DictField(default={'a': 1, 'b': 2})
        DictField(default=lambda: {'a': [], 'b': 'str'})
        DictField(default=[])  # E: Argument "default" to "DictField" has incompatible type "List[Never]"; expected "Union[Dict[Any, Any], Callable[[], Dict[Any, Any]], None, _Empty]"

        JSONField(allow_null=True, default=None)
        JSONField(default={})
        JSONField(default={'a': 1, 'b': 2})
        JSONField(default=lambda: {'a': [], 'b': 'str'})
        JSONField(default=[])  # E: Argument "default" to "JSONField" has incompatible type "List[Never]"; expected "Union[Mapping[Any, Any], Callable[[], Mapping[Any, Any]], None, _Empty]"

-   case: ListField_default
    main: |
        from rest_framework.fields import ListField

        ListField(allow_null=True, default=None)
        ListField(default=[])
        ListField(default=[0, 'one'])
        ListField(default=lambda: [])
        ListField(default='w√§t')  # E: Argument "default" to "ListField" has incompatible type "str"; expected "Union[List[Any], Callable[[], List[Any]], None, _Empty]"
