-   case: api_view
    main: |
        from rest_framework.decorators import api_view
        @api_view()
        def view_func1(request): ...
        reveal_type(view_func1)  # N: Revealed type is 'rest_framework.views.AsView'
-   case: api_view_fancy
    main: |
        from rest_framework.decorators import api_view
        from rest_framework.request import Request
        from rest_framework.response import Response
        @api_view(['GET', 'POST'])
        def view_func2(request: Request, arg: str) -> Response: ...
        reveal_type(view_func2)  # N: Revealed type is 'rest_framework.views.AsView'
-   case: api_view_bare_is_error
    main: |
        from rest_framework.decorators import api_view
        @api_view  # E: Argument 1 to "api_view" has incompatible type "Callable[[Any], Any]"; expected "Optional[Sequence[str]]"
        def view_func2(request): ...
