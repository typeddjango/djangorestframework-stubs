from typing import Any, Dict, Protocol, TypeVar

from django.db.models import Model

from rest_framework.generics import UsesQuerySet
from rest_framework.request import Request
from rest_framework.response import Response
from rest_framework.serializers import BaseSerializer

_MT = TypeVar("_MT", bound=Model)
_MT_co = TypeVar("_MT_co", bound=Model, covariant=True)

class CreateModelMixin:
    def create(self, request: Request, *args: Any, **kwargs: Any) -> Response: ...
    def perform_create(self: UsesQuerySet[_MT_co], serializer: BaseSerializer[_MT_co]) -> None: ...
    def get_success_headers(self, data: Any) -> Dict[str, str]: ...

class ListModelMixin:
    def list(self, request: Request, *args: Any, **kwargs: Any) -> Response: ...

class RetrieveModelMixin:
    def retrieve(self, request: Request, *args: Any, **kwargs: Any) -> Response: ...

class UpdateModelMixin:
    def update(self, request: Request, *args: Any, **kwargs: Any) -> Response: ...
    def perform_update(self: UsesQuerySet[_MT_co], serializer: BaseSerializer[_MT_co]) -> None: ...
    def partial_update(self, request: Request, *args: Any, **kwargs: Any) -> Response: ...

class DestroyModelMixin(Protocol[_MT]):
    def destroy(self, request: Request, *args: Any, **kwargs: Any) -> Response: ...
    def perform_destroy(self: UsesQuerySet[_MT_co], instance: _MT) -> None: ...
