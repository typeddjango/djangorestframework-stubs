from typing import Any, Callable, Iterable, List, Mapping, Optional, Sequence, Union

from django.db.models import Model
from django.db.models.query import QuerySet
from rest_framework.fields import Field, _Validator
from rest_framework.request import Request

def method_overridden(method_name: Any, klass: Any, instance: Any): ...

class ObjectValueError(ValueError): ...
class ObjectTypeError(TypeError): ...

class Hyperlink(str):
    def __new__(cls, url: Any, obj: Any): ...
    def __getnewargs__(self): ...
    @property
    def name(self): ...
    is_hyperlink: bool = ...

class PKOnlyObject:
    pk: Any = ...
    def __init__(self, pk: Any) -> None: ...

MANY_RELATION_KWARGS: Any

class RelatedField(Field):
    queryset: Optional[QuerySet] = ...
    html_cutoff: Optional[int] = ...
    html_cutoff_text: Optional[str] = ...
    def __init__(
        self,
        many: bool = ...,
        allow_empty: bool = ...,
        queryset: Optional[QuerySet] = ...,
        html_cutoff: Optional[int] = ...,
        html_cutoff_text: str = ...,
        read_only: bool = ...,
        write_only: bool = ...,
        required: bool = ...,
        default: Any = ...,
        initial: Any = ...,
        source: Union[Callable, str] = ...,
        label: Optional[str] = ...,
        help_text: str = ...,
        allow_null: bool = ...,
        validators: Optional[Sequence[_Validator]] = ...,
        error_messages: Optional[Mapping[str, str]] = ...,
        style: Optional[Mapping[str, Any]] = ...,
    ): ...
    @classmethod
    def many_init(cls, *args: Any, **kwargs: Any) -> ManyRelatedField: ...
    def get_queryset(self) -> QuerySet: ...
    def use_pk_only_optimization(self) -> bool: ...
    def get_attribute(self, instance: Any) -> Any: ...
    def get_choices(self, cutoff: Optional[int] = ...) -> _Choices: ...
    @property
    def choices(self) -> _Choices: ...
    @property
    def grouped_choices(self) -> _Choices: ...
    def iter_options(self) -> Iterable[Option]: ...
    def display_value(self, instance: Any) -> str: ...
    def run_validation(self, data: Any = ...): ...

class StringRelatedField(RelatedField): ...

class PrimaryKeyRelatedField(RelatedField):
    default_error_messages: Optional[str]  = ...
    pk_field: Optional[str]  = ...

class HyperlinkedRelatedField(RelatedField):
    default_error_messages: Optional[str]  = ...
    reverse: Any = ...
    lookup_field: str = ...
    lookup_url_kwarg: str = ...
    format: Optional[str] = ...
    view_name: Optional[str] = ...
    def __init__(self, view_name: Optional[str] = ..., **kwargs: Any): ...
    def get_object(self, view_name: str, view_args: Any, view_kwargs: Any) -> Model: ...
    def get_url(self, obj: Model, view_name: str, request: Request, format: str) -> Optional[str]: ...

class HyperlinkedIdentityField(HyperlinkedRelatedField): ...

class SlugRelatedField(RelatedField):
    default_error_messages: Optional[str]  = ...
    slug_field: Optional[str] = ...
    def __init__(self, slug_field: Optional[str] = None, **kwargs: Any): ...

class ManyRelatedField(Field):
    initial: List[object] = ...
    default_empty_html: List[object] = ...
    html_cutoff: Optional[int] = ...
    html_cutoff_text: Optional[str] = ...
    default_error_messages: Optional[str]  = ...
    child_relation: Any = ...
    allow_empty: Any = ...
    def __init__(self, child_relation: Optional[RelatedField] = ..., *args: Any, **kwargs: Any) -> None: ...
    def get_choices(self, cutoff: Optional[int] = ...) -> _Choices: ...
    def get_value(self, dictionary: dict): ...
    def get_attribute(self, instance: Any): ...
    @property
    def choices(self) -> _Choices: ...
    @property
    def grouped_choices(self) -> _Choices: ...
    def iter_options(self) -> Iterable[Option]: ...
