-   case: api_view_fancy_error
    main: |
        from rest_framework.decorators import api_view
        from rest_framework.request import Request
        from rest_framework.response import Response
        @api_view(['GET', 'POST'])
        def view_func2(request: Request, arg: str) -> Response: ...

        view_func2(None, 10)  # E: Argument 1 has incompatible type "None"; expected "HttpRequest"  [arg-type]  # E: Argument 2 has incompatible type "int"; expected "str"  [arg-type]
-   case: api_view_bare_is_error
    main: |
        from typing import Any
        from rest_framework.decorators import api_view
        @api_view  # E: Argument 1 to "api_view" has incompatible type "Callable[[Any], Any]"; expected "Sequence[str] | None"  [arg-type]
        def view_func2(request: Any) -> Any: ...
-   case: api_view_incorrect_return
    main: |
        from rest_framework.decorators import api_view
        from rest_framework.request import Request
        @api_view()  # E: Value of type variable "_RESP" of function cannot be "list[Any]"  [type-var]
        def view_func2(request: Request) -> list: ...
-   case: permission_classes
    main: |
        from rest_framework.decorators import permission_classes
        reveal_type(permission_classes) # N: Revealed type is "def (permission_classes: typing.Sequence[type[rest_framework.permissions.BasePermission] | rest_framework.permissions.OperandHolder | rest_framework.permissions.SingleOperandHolder]) -> def [_View <: def (*Any, **Any) -> django.http.response.HttpResponseBase] (_View`-1) -> _View`-1"
