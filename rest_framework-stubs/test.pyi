from typing import Any, Dict, Optional, Union

import coreapi
import requests
from django.db.models import Model
from django.http import HttpRequest, HttpResponse
from django.test import testcases
from django.test.client import Client as DjangoClient
from django.test.client import ClientHandler
from django.test.client import RequestFactory as DjangoRequestFactory
from rest_framework.request import Request
from rest_framework.response import Response

def force_authenticate(request: Any, user: Optional[Any] = ..., token: Optional[Any] = ...) -> None: ...

class HeaderDict(requests.packages.urllib3._collections.HTTPHeaderDict):
    def get_all(self, key: Any, default: Any): ...

class MockOriginalResponse:
    msg: Any = ...
    closed: bool = ...
    def __init__(self, headers: Any) -> None: ...
    def isclosed(self): ...
    def close(self) -> None: ...

class DjangoTestAdapter(requests.adapters.HTTPAdapter):
    app: Any = ...
    factory: Any = ...
    def __init__(self) -> None: ...
    def get_environ(self, request: Any): ...
    def send(self, request: Any, *args: Any, **kwargs: Any): ...
    def close(self) -> None: ...

class RequestsClient(requests.Session): ...

class CoreAPIClient(coreapi.Client):
    def __init__(self, *args: Any, **kwargs: Any): ...
    @property
    def session(self): ...

class APIRequestFactory(DjangoRequestFactory):
    renderer_classes_list: Any = ...
    default_format: Any = ...
    enforce_csrf_checks: Any = ...
    renderer_classes: Any = ...
    def __init__(self, enforce_csrf_checks: bool = ..., **defaults: Any) -> None: ...
    def get(  # type: ignore[override]
        self, path: str, data: Any = ..., secure: bool = ..., **extra: Any
    ) -> Response: ...
    def post(  # type: ignore[override]
        self, path: str, data: Any = ..., content_type: str = ..., secure: bool = ..., **extra: Any
    ) -> Response: ...
    def put(  # type: ignore[override]
        self, path: str, data: Any = ..., content_type: str = ..., secure: bool = ..., **extra: Any
    ) -> Response: ...
    def patch(  # type: ignore[override]
        self, path: str, data: Any = ..., content_type: str = ..., secure: bool = ..., **extra: Any
    ) -> Response: ...
    def delete(  # type: ignore[override]
        self, path: str, data: Any = ..., content_type: str = ..., secure: bool = ..., **extra: Any
    ) -> Response: ...
    def generic(  # type: ignore[override]
        self,
        method: str,
        path: str,
        data: Any = ...,
        content_type: Optional[str] = ...,
        secure: bool = ...,
        **extra: Any
    ) -> Response: ...
    def options(  # type: ignore[override]
        self,
        path: str,
        data: Union[Dict[str, str], str] = ...,
        content_type: str = ...,
        secure: bool = ...,
        **extra: Any
    ) -> Response: ...
    def request(self, **kwargs: Any) -> Request: ...  # type: ignore[override]

class ForceAuthClientHandler(ClientHandler):
    def __init__(self, *args: Any, **kwargs: Any): ...
    def get_response(self, request: HttpRequest) -> HttpResponse: ...

class APIClient(APIRequestFactory, DjangoClient):  # type: ignore
    handler: Any = ...
    def credentials(self, **kwargs: Any): ...
    def force_authenticate(self, user: Optional[Model] = ..., token: Optional[Any] = ...) -> None: ...
    def logout(self) -> None: ...
    def trace(self, path: str, secure: bool = ..., **extra: Any) -> Response: ...  # type: ignore[override]

class APITransactionTestCase(testcases.TransactionTestCase):
    client_class: APIClient = ...

class APITestCase(testcases.TestCase):
    client_class: APIClient = ...

class APISimpleTestCase(testcases.SimpleTestCase):
    client_class: APIClient = ...

class APILiveServerTestCase(testcases.LiveServerTestCase):
    client_class: APIClient = ...

class URLPatternsTestCase(testcases.SimpleTestCase): ...
