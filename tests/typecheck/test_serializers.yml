- case: test_return_list_serializer_argument_is_kw_only
  parametrized:
    - arg: ""
      err: No overload variant of "ReturnList" matches argument type "TestSerializer"  [call-overload]
    - arg: "[],"
      err: No overload variant of "ReturnList" matches argument types "list[Never]", "TestSerializer"  [call-overload]
  main: |
    from rest_framework import serializers
    from rest_framework.utils.serializer_helpers import ReturnList

    class TestSerializer(serializers.Serializer):
        def test(self) -> None:
            ReturnList({{ arg }} self)
  out: |
    main:6: error: {{ err }}
    main:6: note: Possible overload variants:
    main:6: note:     def [_T] ReturnList(self, *, serializer: BaseSerializer[Any]) -> ReturnList[_T]
    main:6: note:     def [_T] ReturnList(self, Iterable[_T], /, *, serializer: BaseSerializer[Any]) -> ReturnList[_T]

- case: test_return_list_serializer_is_required
  parametrized:
    - arg: ""
      err: All overload variants of "ReturnList" require at least one argument  [call-overload]
    - arg: "[]"
      err: No overload variant of "ReturnList" matches argument type "list[Never]"  [call-overload]
  main: |
    from rest_framework import serializers
    from rest_framework.utils.serializer_helpers import ReturnList

    class TestSerializer(serializers.Serializer):
        def test(self) -> None:
            ReturnList({{ arg }})
  out: |
    main:6: error: {{ err }}
    main:6: note: Possible overload variants:
    main:6: note:     def [_T] ReturnList(self, *, serializer: BaseSerializer[Any]) -> ReturnList[_T]
    main:6: note:     def [_T] ReturnList(self, Iterable[_T], /, *, serializer: BaseSerializer[Any]) -> ReturnList[_T]

- case: test_return_dict_serializer_argument_is_kw_only
  parametrized:
    - arg: ""
      err: No overload variant of "ReturnDict" matches argument type "TestSerializer"  [call-overload]
    - arg: "{},"
      err: No overload variant of "ReturnDict" matches argument types "dict[Never, Never]", "TestSerializer"  [call-overload]
    - arg: "[],"
      err: No overload variant of "ReturnDict" matches argument types "list[Never]", "TestSerializer"  [call-overload]
    - arg: "[('a', 'a')],"
      err: No overload variant of "ReturnDict" matches argument types "list[tuple[str, str]]", "TestSerializer"  [call-overload]
  main: |
    from rest_framework import serializers
    from rest_framework.utils.serializer_helpers import ReturnDict

    class TestSerializer(serializers.Serializer):
        def test(self) -> None:
            ReturnDict({{ arg }} self)
  out: |
    main:6: error: {{ err }}
    main:6: note: Possible overload variants:
    main:6: note:     def [_KT, _VT] ReturnDict(self, *, serializer: BaseSerializer[Any]) -> ReturnDict[_KT, _VT]
    main:6: note:     def [_KT, _VT] ReturnDict(self, *, serializer: BaseSerializer[Any], **kwargs: _VT) -> ReturnDict[str, _VT]
    main:6: note:     def [_KT, _VT] ReturnDict(self, SupportsKeysAndGetItem[_KT, _VT], /, *, serializer: BaseSerializer[Any]) -> ReturnDict[_KT, _VT]
    main:6: note:     def [_KT, _VT] ReturnDict(self, SupportsKeysAndGetItem[str, _VT], /, *, serializer: BaseSerializer[Any], **kwargs: _VT) -> ReturnDict[str, _VT]
    main:6: note:     def [_KT, _VT] ReturnDict(self, Iterable[tuple[_KT, _VT]], /, *, serializer: BaseSerializer[Any]) -> ReturnDict[_KT, _VT]
    main:6: note:     def [_KT, _VT] ReturnDict(self, Iterable[tuple[str, _VT]], /, *, serializer: BaseSerializer[Any], **kwargs: _VT) -> ReturnDict[str, _VT]
    main:6: note:     def [_KT, _VT] ReturnDict(self, Iterable[list[str]], /, *, serializer: BaseSerializer[Any]) -> ReturnDict[str, str]
    main:6: note:     def [_KT, _VT] ReturnDict(self, Iterable[list[bytes]], /, *, serializer: BaseSerializer[Any]) -> ReturnDict[bytes, bytes]

- case: test_return_dict_serializer_is_required
  parametrized:
    - arg: ""
      err: All overload variants of "ReturnDict" require at least one argument  [call-overload]
    - arg: "{}"
      err: No overload variant of "ReturnDict" matches argument type "dict[Never, Never]"  [call-overload]
    - arg: "[]"
      err: No overload variant of "ReturnDict" matches argument type "list[Never]"  [call-overload]
    - arg: "[('a', 'a')]"
      err: No overload variant of "ReturnDict" matches argument type "list[tuple[str, str]]"  [call-overload]
  main: |
    from rest_framework import serializers
    from rest_framework.utils.serializer_helpers import ReturnDict

    class TestSerializer(serializers.Serializer):
        def test(self) -> None:
            ReturnDict({{ arg }})
  out: |
    main:6: error: {{ err }}
    main:6: note: Possible overload variants:
    main:6: note:     def [_KT, _VT] ReturnDict(self, *, serializer: BaseSerializer[Any]) -> ReturnDict[_KT, _VT]
    main:6: note:     def [_KT, _VT] ReturnDict(self, *, serializer: BaseSerializer[Any], **kwargs: _VT) -> ReturnDict[str, _VT]
    main:6: note:     def [_KT, _VT] ReturnDict(self, SupportsKeysAndGetItem[_KT, _VT], /, *, serializer: BaseSerializer[Any]) -> ReturnDict[_KT, _VT]
    main:6: note:     def [_KT, _VT] ReturnDict(self, SupportsKeysAndGetItem[str, _VT], /, *, serializer: BaseSerializer[Any], **kwargs: _VT) -> ReturnDict[str, _VT]
    main:6: note:     def [_KT, _VT] ReturnDict(self, Iterable[tuple[_KT, _VT]], /, *, serializer: BaseSerializer[Any]) -> ReturnDict[_KT, _VT]
    main:6: note:     def [_KT, _VT] ReturnDict(self, Iterable[tuple[str, _VT]], /, *, serializer: BaseSerializer[Any], **kwargs: _VT) -> ReturnDict[str, _VT]
    main:6: note:     def [_KT, _VT] ReturnDict(self, Iterable[list[str]], /, *, serializer: BaseSerializer[Any]) -> ReturnDict[str, str]
    main:6: note:     def [_KT, _VT] ReturnDict(self, Iterable[list[bytes]], /, *, serializer: BaseSerializer[Any]) -> ReturnDict[bytes, bytes]
