-   case: no_positional_args_fields
    main: |
        from rest_framework.fields import IntegerField, FloatField, UUIDField, CharField, DurationField
        CharField(True)  # E: Too many positional arguments for "CharField"  [misc]
        IntegerField(1)  # E: Too many positional arguments for "IntegerField"  [misc]
        FloatField(1)  # E: Too many positional arguments for "FloatField"  [misc]
        UUIDField('hex_verbose')  # E: Too many positional arguments for "UUIDField"  [misc]
        DurationField(1)  # E: Too many positional arguments for "DurationField"  [misc]

-   case: some_positional_args_fields
    main: |
        from datetime import datetime, time
        from django.db import models
        from rest_framework.fields import DecimalField, IPAddressField, SlugField, RegexField, ModelField, SerializerMethodField, ChoiceField, DateTimeField, DateField, TimeField

        DecimalField(1, 1, False, 1, 1, False, None, False)
        DecimalField(1, 1, False, 1, 1, False, None, False, True)  # E: Too many positional arguments for "DecimalField"  [misc]

        IPAddressField('both')
        IPAddressField('both', True)  # E: Too many positional arguments for "IPAddressField"  [misc]

        SlugField(False)
        SlugField(False, True)  # E: Too many positional arguments for "SlugField"  [misc]

        RegexField('^$')
        RegexField('^$', True)  # E: Too many positional arguments for "RegexField"  [misc]

        SerializerMethodField('bla')
        SerializerMethodField('bla', True)  # E: Too many positional arguments for "SerializerMethodField"  [misc]

        mf: models.CharField = models.CharField()
        ModelField(mf)
        ModelField(mf, True)  # E: Too many positional arguments for "ModelField"  [misc]

        ChoiceField([])
        ChoiceField([], False)  # E: Too many positional arguments for "ChoiceField"  [misc]

        d: datetime = datetime.now()
        DateTimeField('', [], None, read_only=True, write_only=True, allow_null=True)
        DateTimeField('', [], None, True)  # E: Too many positional arguments for "DateTimeField"  [misc]

        DateField('', [], read_only=True, write_only=True, allow_null=True)
        DateField('', [], True)  # E: Too many positional arguments for "DateField"  [misc]

        TimeField('', [], read_only=True, write_only=True, allow_null=True)
        TimeField('', [], True)  # E: Too many positional arguments for "TimeField"  [misc]

-   case: default_and_inital_args_fields
    main: |
        from rest_framework.fields import DictField, CharField, empty
        from typing import Dict, Any

        CharField(initial='', default=lambda: '')
        CharField(initial=None, default=4)  # E: Argument "default" to "CharField" has incompatible type "int"; expected "str | _StrPromise | Callable[[], str | _StrPromise] | _Empty | None"  [arg-type]
        CharField(initial={}, default=empty)  # E: Argument "initial" to "CharField" has incompatible type "dict[Never, Never]"; expected "str | Callable[[], str] | _Empty | None"  [arg-type]

        x: str | None = CharField().get_initial()
        y: int | None = CharField().get_initial()  # E: Incompatible types in assignment (expression has type "str | None", variable has type "int | None")  [assignment]

-   case: float_field_args_fields
    main: |
      from rest_framework.fields import FloatField

      FloatField(min_value=1, max_value=1.0)
      FloatField(min_value=1.2, max_value=1)

-   case: ChoiceField_default
    main: |
        from rest_framework.fields import ChoiceField

        def int_callback() -> int: ...
        def mixed_callback() -> int | str: ...

        ChoiceField([1], default=1)
        ChoiceField(['test'], allow_null=True, default=None)
        ChoiceField([1], default=int_callback)
        ChoiceField([1, 'lulz'], default=mixed_callback)
        ChoiceField([1], default=lambda: None)   # E: Argument "default" to "ChoiceField" has incompatible type "Callable[[], None]"; expected "str | _StrPromise | int | Callable[[], str | _StrPromise | int] | _Empty | None"  [arg-type]  # E: Incompatible return value type (got "None", expected "str | _StrPromise | int")  [return-value]

-   case: MultipleChoiceField_default
    main: |
        from rest_framework.fields import MultipleChoiceField

        def int_set_callback() -> set[int]: ...
        def mixed_set_callback() -> set[int | str]: ...

        MultipleChoiceField(choices=[1], default={1})
        MultipleChoiceField(choices=['test'], allow_null=True, default=None)
        MultipleChoiceField(choices=[1], default=int_set_callback)
        MultipleChoiceField(choices=[1, 'lulz'], default=mixed_set_callback)
        MultipleChoiceField(choices=[1], default=lambda: [1])   # E: Argument "default" to "MultipleChoiceField" has incompatible type "Callable[[], list[int]]"; expected "set[str | int] | set[str] | set[int] | Callable[[], set[str | int] | set[str] | set[int]] | _Empty | None"  [arg-type]  # E: Incompatible return value type (got "list[int]", expected "set[str | int] | set[str] | set[int]")  [return-value]

        MultipleChoiceField(choices=[(1, "1"), (2, "2")], default={1})
        MultipleChoiceField(choices=[(1, "1"), (2, "2")], default=[1])  # E: Argument "default" to "MultipleChoiceField" has incompatible type "list[int]"; expected "set[str | int] | set[str] | set[int] | Callable[[], set[str | int] | set[str] | set[int]] | _Empty | None"  [arg-type]

        MultipleChoiceField(choices=[(1, "1"), (2, "2")], initial={1})
        MultipleChoiceField(choices=[(1, "1"), (2, "2")], initial=[1])  # E: Argument "initial" to "MultipleChoiceField" has incompatible type "list[int]"; expected "set[str | _StrPromise | int] | set[str | _StrPromise] | set[int] | Callable[[], set[str | _StrPromise | int] | set[str | _StrPromise] | set[int]] | _Empty | None"  [arg-type]

-   case: FileField_default
    main: |
        from rest_framework.fields import FileField, ImageField
        from django.core.files.base import File

        def file_callback() -> File: ...

        FileField(allow_null=True, default=None)
        FileField(allow_null=True, default=file_callback)
        FileField(allow_null=True, default=file_callback())
        FileField(allow_null=True, default=123) # E: Argument "default" to "FileField" has incompatible type "int"; expected "File[Any] | Callable[[], File[Any]] | _Empty | None"  [arg-type]

        ImageField(allow_null=True, default=None)
        ImageField(default=file_callback)
        ImageField(default=file_callback())
        ImageField(default='a') # E: Argument "default" to "ImageField" has incompatible type "str"; expected "File[Any] | Callable[[], File[Any]] | _Empty | None"  [arg-type]

-   case: DictField_default
    main: |
        from rest_framework.fields import DictField, JSONField

        DictField(allow_null=True, default=None)
        DictField(default={})
        DictField(default={'a': 1, 'b': 2})
        DictField(default=lambda: {'a': [], 'b': 'str'})
        DictField(default=[])  # E: Argument "default" to "DictField" has incompatible type "list[Never]"; expected "dict[Any, Any] | Callable[[], dict[Any, Any]] | _Empty | None"  [arg-type]

        JSONField(allow_null=True, default=None)
        JSONField(default={})
        JSONField(default={'a': 1, 'b': 2})
        JSONField(default=lambda: {'a': [], 'b': 'str'})
        JSONField(default=[])  # E: Argument "default" to "JSONField" has incompatible type "list[Never]"; expected "Mapping[Any, Any] | Callable[[], Mapping[Any, Any]] | _Empty | None"  [arg-type]

-   case: ListField_default
    main: |
        from rest_framework.fields import ListField

        ListField(allow_null=True, default=None)
        ListField(default=[])
        ListField(default=[0, 'one'])
        ListField(default=lambda: [])
        ListField(default='w√§t')  # E: Argument "default" to "ListField" has incompatible type "str"; expected "list[Any] | Callable[[], list[Any]] | _Empty | None"  [arg-type]
