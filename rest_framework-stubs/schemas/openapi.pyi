from typing import Any, Dict, List, Mapping, Optional

from rest_framework.request import Request

from .generators import BaseSchemaGenerator as BaseSchemaGenerator
from .inspectors import ViewInspector as ViewInspector

class SchemaGenerator(BaseSchemaGenerator):
    def get_info(self) -> Dict[str, Any]: ...
    def get_paths(self, request: Optional[Request] = ...) -> Dict[str, Any]: ...
    def get_schema(self, request: Optional[Request] = ..., public: bool = ...) -> Dict[str, Any]: ...

class AutoSchema(ViewInspector):
    request_media_types: List[str] = ...
    response_media_types: List[str] = ...
    method_mapping: Dict[str, str] = ...
    def get_operation(self, path: str, method: str) -> Dict[str, Any]: ...
    def map_parsers(self, path: str, method: str) -> List[Mapping[str, Any]]: ...
    def map_renderers(self, path: str, method: str) -> List[str]: ...
